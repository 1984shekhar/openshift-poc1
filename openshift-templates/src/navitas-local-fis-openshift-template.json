{
  /*  ================================================================================================================== *

  Template to provide a runtime environment based on JBoss Fuse Integration Service (FIS)
  Inputs:	1) FIS image from Red Hat Registry
            2) Application source to inject from GitHub for now
  Will Image-stream to be built and deployed on change of FIS Image or Source Change (via Web-Hook added to GitHub)

  Refer to https://blog.openshift.com/part-2-creating-a-template-a-technical-walkthrough/

  * ================================================================================================================== */

  "apiVersion": "v1",
  "kind": "Template",
  "metadata": {
    "annotations": {
      "description": "REST example using CXF in Karaf container.",
      "tags": "quickstart,java,karaf,fis",
      "iconClass": "icon-jboss",
      "version": "2.0"
    },
    "name": "navitas-local-fis"
  },
  "labels": {
    /* applied to ALL resources in template... */
    "template": "navitas-local-fis"
  },
  "parameters": [
    {
      "name": "APP_NAME",
      "displayName": "Application Name",
      "required": true,
      "value": "navitas-local-fis",
      "description": "The name assigned to the application."
    },
    {
      "name": "GIT_REPO",
      "displayName": "Git Repository URL",
      "value": "https://github.com/LeoLanceb/openshift-poc1.git",
      "required": true,
      "description": "The URL of the repository with your application source code."
    },
    {
      "name": "GIT_REF",
      "displayName": "Git Reference",
      "value": "master",
      /* master is just an interim value!!!  */
      "description": "Set this to a branch name, tag or other ref of your repository if you are not using the default branch."
    },
    {
      "name": "BUILD_SECRET",
      "displayName": "GitHub Webhook Secret",
      "description": "A secret string used to configure the GitHub webhook.",
      "generate": "expression",
      "from": "[a-zA-Z0-9]{40}"
    },
    {
      "name": "ENV_NAME",
      "displayName": "Environment Name",
      "value": "local",
      /* 'local' means use local-common.properties to merge into base-common.properties  */
      "description": "Environment Name.  eg. DEV1, UAT2, PROD, FREDTEST, etc"
    },
    {
      "name": "SERVICE_NAME",
      "displayName": "Service Name",
      "value": "navitas-local-fis",
      "description": "Exposed Service name."
    },
    {
      "name": "BUILDER_VERSION",
      "displayName": "Builder version",
      "value": "2.0.6",
      /*"2.0"*/
      "description": "The version of the FIS S2I builder image to use."
    },
    {
      "name": "APP_VERSION",
      "displayName": "Application Version",
      "value": "1.0.0.redhat-000010",
      "description": "The application version."
    },
    {
      "name": "MAVEN_ARGS",
      "displayName": "Maven Arguments",
      "value": "install -DskipTests -Dfabric8.skip -e -B",
      "description": "Arguments passed to mvn in the build."
    },
    {
      "name": "MAVEN_ARGS_APPEND",
      "displayName": "Extra Maven Arguments",
      "description": "Extra arguments passed to mvn, e.g. for multi-module builds."
    },
    {
      "name": "ARTIFACT_DIR",
      "displayName": "Maven build directory",
      "value": "build-pod1/target",
      /* ...directory that contains "assembly" sub-directory */
      "description": "Directory of the artifact to be built, e.g. for multi-module builds."
    },
    /* redundant ...
    {
      "name": "IMAGE_STREAM_NAMESPACE",
      "displayName": "Image Stream Namespace",
      "value": "navitas",
      "required": true,
      "description": "Namespace in which the Fuse ImageStreams are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project (ie. 'navitas' project)."
    }, */
    {
      "name": "CPU_REQUEST",
      "displayName": "CPU request",
      "value": "0.2",
      "required": true,
      "description": "The amount of CPU to requests."
    },
    {
      "name": "MEMORY_REQUEST",
      "displayName": "Memory request",
      "value": "1.5G",
      "required": true,
      "description": "The amount of memory required for the container to run."
    },
    {
      "name": "CPU_LIMIT",
      "displayName": "CPU limit",
      "value": "1.0",
      "required": true,
      "description": "The amount of CPU the container is limited to use."
    },
    {
      "name": "MEMORY_LIMIT",
      "displayName": "Memory limit",
      "value": "2G",
      "required": true,
      "description": "The amount of memory the container is limited to use."
    }
  ],
  "objects": [
    /* ============================================== */
    /* BUILD AND DEPLOYMENT OBJECTS                   */
    /* ============================================== */

    /* LAYER 0 - BASE IMAGES (FIS/KARAF) */

    {
      "kind": "ImageStream",
      "apiVersion": "v1",
      "metadata": {
        "name": "fis-karaf-openshift"
      },
      "spec": {
        "dockerImageRepository": "registry.access.redhat.com/jboss-fuse-6/fis-karaf-openshift",
        "tags": [
          {
            "name": "2.0-7",
            /*...explicit image.  Don't want to automatically rebuild/redeploy if a later image becomes available */
            "annotations": {
              "description": "JBoss Fuse Integration Services 2.0 Karaf S2I images.",
              "iconClass": "icon-jboss",
              "tags": "builder,jboss-fuse,java,karaf,xpaas",
              "supports": "jboss-fuse:6.3.0,java:8,xpaas:1.2",
              "version": "2.0"
            }
          }
        ]
      }
    },
    /* LAYER 1 - BUILD DEPLOYABLE IMAGES FROM BASE-IMAGE AND APPLICATION-SOURCE TO INJECT (S2I)
        TRIGGERED BY BASE-IMAGE, CONFIG OR SOURCE-GIT COMMIT WEB-HOOK */
    {
      "kind": "BuildConfig",
      "apiVersion": "v1",
      "metadata": {
        "name": "${APP_NAME}",
        "creationTimestamp": null,
        "labels": {
          "component": "${APP_NAME}",
          "container": "karaf",
          "group": "quickstarts",
          "project": "${APP_NAME}",
          "provider": "s2i",
          "version": "${APP_VERSION}"
        }
      },
      "spec": {
        "triggers": [
          {
            "type": "GitHub",
            "github": {
              "secret": "${BUILD_SECRET}"
            }
          },
          {
            "type": "Generic",
            "generic": {
              "secret": "${BUILD_SECRET}"
            }
          },
          {
            "type": "ConfigChange"
          },
          {
            "type": "ImageChange",
            "imageChange": {}
          }
        ],
        "source": {
          "type": "Git",
          "git": {
            "uri": "${GIT_REPO}",
            "ref": "${GIT_REF}"
            /* ...branch */
          },
          "contextDir": "navitas-service-pod1"
          /* ...for the content of this pod only */
        },
        "strategy": {
          "type": "Source",
          "sourceStrategy": {
            "from": {
              "kind": "ImageStreamTag",
              /* redundant.  Use base-image from default namespace ("openshift")...
              "namespace": "${IMAGE_STREAM_NAMESPACE}", */
              "name": "fis-karaf-openshift:${BUILDER_VERSION}"
            },
            "forcePull": true,
            "incremental": true,
            "env": [
              {
                "name": "BUILD_LOGLEVEL",
                "value": "5"
              },
              {
                "name": "ARTIFACT_DIR",
                "value": "${ARTIFACT_DIR}"
              },
              {
                "name": "MAVEN_ARGS",
                "value": "${MAVEN_ARGS}"
              },
              {
                "name": "MAVEN_ARGS_APPEND",
                "value": "${MAVEN_ARGS_APPEND}"
              },
              {
                "name": "ENV_NAME",
                "value": "${ENV_NAME}"
              }
            ]
          }
        },
        "output": {
          "to": {
            "kind": "ImageStreamTag",
            "name": "${APP_NAME}:latest"
          }
        },
        "resources": {}
      },
      "status": {
        "lastVersion": 0
      }
    },
    /* LAYER 2 - DEPLOYABLE IMAGES FROM BUILD */
    {
      "kind": "ImageStream",
      "apiVersion": "v1",
      "metadata": {
        "name": "${APP_NAME}",
        "creationTimestamp": null,
        "labels": {
          "component": "${APP_NAME}",
          "container": "karaf",
          "group": "quickstarts",
          "project": "${APP_NAME}",
          "provider": "s2i",
          "version": "${APP_VERSION}"
        }
      },
      "spec": {},
      "status": {
        "dockerImageRepository": ""
      }
    },
    /* LAYER 3 - DEPLOY NEWLY-BUILT DEPLOYABLE-IMAGES TO PODS (SEE POD TEMPLATE), TRIGGERED BY IMAGE-CHANGE */
    {
      "kind": "DeploymentConfig",
      "apiVersion": "v1",
      "metadata": {
        "name": "${APP_NAME}",
        "creationTimestamp": null,
        "labels": {
          "component": "${APP_NAME}",
          "container": "karaf",
          "group": "quickstarts",
          "project": "${APP_NAME}",
          "provider": "s2i",
          "version": "${APP_VERSION}"
        }
      },
      "spec": {
        "strategy": {
          "type": "Recreate",
          /* ...Rolling causes problems with single-node and mem limitations */
          "resources": {}
        },
        "triggers": [
          {
            "type": "ConfigChange"
          },
          {
            "type": "ImageChange",
            "imageChangeParams": {
              "automatic": true,
              "containerNames": [
                "${APP_NAME}"
              ],
              "from": {
                "kind": "ImageStreamTag",
                "name": "${APP_NAME}:latest"
              }
            }
          }
        ],
        "replicas": 1,
        "selector": {
          "component": "${APP_NAME}",
          "container": "karaf",
          "deploymentconfig": "${APP_NAME}",
          /* ...must match *.metadata.name */
          "group": "quickstarts",
          "project": "${APP_NAME}",
          "provider": "s2i",
          "version": "${APP_VERSION}"
        },
        "template": {
          /* POD TEMPLATE */
          "metadata": {
            "creationTimestamp": null,
            "labels": {
              "component": "${APP_NAME}",
              "container": "karaf",
              "deploymentconfig": "${APP_NAME}",
              "group": "quickstarts",
              "project": "${APP_NAME}",
              "provider": "s2i",
              "version": "${APP_VERSION}"
            }
          },
          "spec": {
            "containers": [
              {
                "name": "${APP_NAME}",
                "image": "library/${APP_NAME}:latest",
                "readinessProbe": {
                  "httpGet": {
                    "path": "/readiness-check",
                    "port": 8181
                  },
                  "initialDelaySeconds": 10
                },
                "livenessProbe": {
                  "httpGet": {
                    "path": "/health-check",
                    "port": 8181
                  },
                  "initialDelaySeconds": 180
                },
                "ports": [
                  {
                    "containerPort": 8181,
                    "name": "http"
                  },
                  {
                    "containerPort": 8778,
                    "name": "jolokia",
                    "protocol": "TCP"
                    /* ... allows access to FIS Hawtio Console via pod jvm-console > Jolokia. see https://access.redhat.com/documentation/en-us/red_hat_jboss_fuse/6.3/html-single/fuse_integration_services_2.0_for_openshift/ (...except it doesn't work with OpenShift/Origin. Sigh.) */
                  }
                ],
                "env": [
                  {
                    "name": "KUBERNETES_NAMESPACE",
                    "valueFrom": {
                      "fieldRef": {
                        "fieldPath": "metadata.namespace"
                      }
                    }
                  }
                ],
                "resources": {
                  "requests": {
                    "cpu": "${CPU_REQUEST}",
                    "memory": "${MEMORY_REQUEST}"
                  },
                  "limits": {
                    "cpu": "${CPU_LIMIT}",
                    "memory": "${MEMORY_LIMIT}"
                  }
                }
              }
            ]
          }
        }
      },
      "status": {}
    },
    /* ============================================== */
    /* RUNTIME OBJECTS                                */
    /* ============================================== */

    /* LAYER 4 - ABSTRACTION LAYER */
    {
      "apiVersion": "v1",
      "kind": "Service",
      "metadata": {
        "annotations": {
        },
        "labels": {
          "container": "karaf",
          "component": "${APP_NAME}",
          "provider": "s2i",
          "project": "${APP_NAME}",
          "version": "${APP_VERSION}",
          "group": "quickstarts"
        },
        "name": "${SERVICE_NAME}"
      },
      "spec": {
        "clusterIP": "None",
        "deprecatedPublicIPs": [],
        "ports": [
          {
            "port": 9412,
            "protocol": "TCP",
            "targetPort": 8181
          }
        ],
        "selector": {
          "container": "karaf",
          "project": "${APP_NAME}",
          "component": "${APP_NAME}",
          "provider": "s2i",
          "group": "quickstarts"
        }
      }
    },
    {
      "apiVersion": "v1",
      "kind": "Route",
      "metadata": {
        "labels": {
          "container": "java",
          "component": "${APP_NAME}",
          "provider": "s2i",
          "project": "${APP_NAME}",
          "version": "${APP_VERSION}",
          "group": "quickstarts"
        },
        "name": "${SERVICE_NAME}-route"
      },
      "spec": {
        "to": {
          "kind": "Service",
          "name": "${SERVICE_NAME}"
        }
      }
    }
  ]
}
